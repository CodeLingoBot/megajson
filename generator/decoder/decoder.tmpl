package {{.Name.Name}}

import (
	"errors"
	"fmt"
	"io"
	"github.com/benbjohnson/megajson/scanner"
)

{{range types .}}
type {{.Name.Name}}JSONDecoder struct {
	s scanner.Scanner
}

func New{{.Name.Name}}JSONDecoder(r io.Reader) *{{.Name.Name}}JSONDecoder {
	return &{{.Name.Name}}JSONDecoder{s: scanner.NewScanner(r)}
}

func New{{.Name.Name}}JSONScanDecoder(s scanner.Scanner) *{{.Name.Name}}JSONDecoder {
	return &{{.Name.Name}}JSONDecoder{s: s}
}

func (e *{{.Name.Name}}JSONDecoder) Decode(ptr **{{.Name.Name}}) error {
	s := e.s
	if tok, tokval, err := s.Scan(); err != nil {
		return err
	} else if tok == scanner.TNULL {
		*ptr = nil
		return nil
	} else if tok != scanner.TLBRACE {
		return fmt.Errorf("Unexpected %s at %d: %s; expected '{'", scanner.TokenName(tok), s.Pos(), string(tokval))
	}

	// Create the object if it doesn't exist.
	if *ptr == nil {
		*ptr = &{{.Name.Name}}{}
	}
	v := *ptr

	// Loop over key/value pairs.
	index := 0
	for {
		// Read in key.
		var key string
		tok, tokval, err := s.Scan()
		if err != nil {
			return err
		} else if tok == scanner.TRBRACE {
			return nil
		} else if tok == scanner.TCOMMA {
			if index == 0 {
				return fmt.Errorf("Unexpected comma at %d", s.Pos())
			}
			if tok, tokval, err = s.Scan(); err != nil {
				return err
			}
		}

		if tok != scanner.TSTRING {
			return fmt.Errorf("Unexpected %s at %d: %s; expected '{' or string", scanner.TokenName(tok), s.Pos(), string(tokval))
		} else {
			key = string(tokval)
		}

		// Read in the colon.
		if tok, tokval, err := s.Scan(); err != nil {
			return err
		} else if tok != scanner.TCOLON {
			return fmt.Errorf("Unexpected %s at %d: %s; expected colon", scanner.TokenName(tok), s.Pos(), string(tokval))
		}

		switch key {
		{{range fields .}}
			{{if keyname .}}
			case {{keyname . | printf "%q"}}:
				v := &v.{{fieldname .}}

				{{if isprimitivetype .}}
					{{if istype . "string"}}
						if err := s.ReadString(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "int"}}
						if err := s.ReadInt(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "int64"}}
						if err := s.ReadInt64(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "uint"}}
						if err := s.ReadUint(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "uint64"}}
						if err := s.ReadUint64(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "float32"}}
						if err := s.ReadFloat32(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "float64"}}
						if err := s.ReadFloat64(v); err != nil {
							return err
						}
					{{end}}
					{{if istype . "bool"}}
						if err := s.ReadBool(v); err != nil {
							return err
						}
					{{end}}
				{{end}}
				{{if istype . "*"}}
					if err := New{{subtype .}}JSONScanDecoder(s).Decode(v); err != nil {
						return err
					}
				{{end}}
				{{if istype . "[]"}}
					if err := New{{subtype .}}JSONScanDecoder(s).DecodeArray(v); err != nil {
						return err
					}
				{{end}}
			{{end}}
		{{end}}
		}

		index++
	}

	return nil
}

func (e *{{.Name.Name}}JSONDecoder) DecodeArray(ptr *[]*{{.Name.Name}}) error {
	s := e.s
	if tok, _, err := s.Scan(); err != nil {
		return err
	} else if tok != scanner.TLBRACKET {
		return errors.New("Expected '['")
	}

	slice := make([]*{{.Name.Name}}, 0)

	// Loop over items.
	index := 0
	for {
		tok, tokval, err := s.Scan()
		if err != nil {
			return err
		} else if tok == scanner.TRBRACKET {
			*ptr = slice
			return nil
		} else if tok == scanner.TCOMMA {
			if index == 0 {
				return fmt.Errorf("Unexpected comma in array at %d", s.Pos())
			}
			if tok, tokval, err = s.Scan(); err != nil {
				return err
			}
		}
		s.Unscan(tok, tokval)

		item := &{{.Name.Name}}{}
		if err := e.Decode(&item); err != nil {
			return err
		}
		slice = append(slice, item)

		index++
	}
}

{{end}}
